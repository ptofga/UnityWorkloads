// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel PerlinNoise

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
/*
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
    Result[id.xy] = float4(id.x/255.0, id.y/255.0, 0.0, 0.0);
}
*/
float scale=100;
int Type = 0;
int State = 0;
int size;

float2 hash22(float2 p)
{
    p = float2(dot(p, float2(127.1, 311.7)), dot(p, float2(269.5, 183.3)));
    return -1.0 + 2.0 * frac(sin(p) * 43758.5453123);
}


float Perlin(float2 p)
{
    float2 pi = floor(p);
    float2 pf = frac(p);
    
    //float2 w = pf * pf * (3.0 - 2.0 * pf);
    float2 w = pf * pf * pf * (6 * pf * pf - 15 * pf + 10);
     
    return lerp(lerp(dot(hash22(pi + float2(0.0, 0.0)), pf - float2(0.0, 0.0)),
                    dot(hash22(pi + float2(1.0, 0.0)), pf - float2(1, 0.0)), w.x),
                lerp(dot(hash22(pi + float2(0.0, 1.0)), pf - float2(0.0, 1.0)),
                    dot(hash22(pi + float2(1.0, 1.0)), pf - float2(1.0, 1.0)), w.x), w.y);
}

float PerlinSum(float2 p)
{
    float f = 0;
    p = p * 8;
    float2x2 m = float2x2(1.6, 1.2, -1.2, 1.6);
    
    f += 1.0 * (State > 0 ? abs(Perlin(p)) : Perlin(p));
    p = mul(m, p);
    f += 0.5 * (State > 0 ? abs(Perlin(p)) : Perlin(p));
    p = mul(m, p);
    f += 0.25 * (State > 0 ? abs(Perlin(p)) : Perlin(p));
    p = mul(m, p);
    f += 0.125 * (State > 0 ? abs(Perlin(p)) : Perlin(p));
    p = mul(m, p);
    f += 0.0625 * (State > 0 ? abs(Perlin(p)) : Perlin(p));
    
    p = mul(m, p);
    if (State > 1)
        f = sin(f + p.x / 32.0);
    return f;
}


[numthreads(8,8,1)]
void PerlinNoise(uint3 id : SV_DispatchThreadID)
{   
    float r = 0;
    r = PerlinSum(id.xy / scale);
    Result[id.xy] = float4(r, r, r, 0);
} 